server {

    listen          80;

    # Misc settings.
    charset     utf-8;
    client_max_body_size 1024m;

    # Serve static files. No caching considerations other than nginx's builtin
    # ETAG support.
    location /static {
        alias   /srv/www;
    }

    # Serve static files using X-Accel-Redirect (nginx's version of
    # X-Sendfile). The way this works is that an incoming request has been
    # forwarded to a backend server (uwsgi) who responded with a response
    # containing an X-Accel-Redirect header, which causes nginx to serve the
    # corresponding file.
    location /static_internal {
        internal;
        alias   /srv/www/;
    }

    # Serve static files for best caching behavior. Instruct browser to cache
    # forever using Expires and Cache-Control headers, but use a build-id as a
    # path prefix to force the browser to download after each build/deployment.
    location ~ ^/static-[^/]+/(.+) {
        alias   /srv/www/$1;
        expires max;
    }

    # Configure proxying to uwsgi.
    location / {

        proxy_set_header    Host $http_host;
        proxy_pass          http://uwsgi:8000;

        # Wait up to 10 mins before giving up with 504 gateway timed out error.
        proxy_read_timeout  600s;

        # Compress json responses.
        # WARNING: This potentially makes us vulnerable to the BREACH attack.
        # We need to revisit this decision.
        gzip                on;
        gzip_types          application/json;
        # 1 is largest and fastest, 9 is smaller and slower.
        gzip_comp_level     1;

    }

}
